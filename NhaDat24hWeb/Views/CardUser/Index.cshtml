@using NhaDat24h.DataDto.Ctv;
@*@using NhaDat24h.DataDto.Users;*@
@model CtvEditDto;

@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@Model.FullName | SGO Land</title>
    <meta name="author" content="SGO Land thuộc SGO Group là công ty chuyên kinh doanh, môi giới bất động sản từ các Chủ đầu tư lớn trên thị trường bất động sản Việt Nam." />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="shortcut icon" type="image/x-icon" href="~/assets/img/sgo-land-icon.png">
    <link rel="stylesheet" href="~/assets/css/styles.css?v=112">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
	<link rel="stylesheet" href="~/assets/css/all.css" />
    <!-- Custom Color Option -->
    <link href="~/assets/css/colors.css" rel="stylesheet">@*
    <script src="https://requirejs.org/docs/release/2.3.5/minified/require.js"></script>*@
</head>

<body class="yellow-skin dashboard">
    <!-- ============================================================== -->
    <!-- Preloader - style you can find in spinners.css -->
    <!-- ============================================================== -->
    <div class="preloader"></div>

    <!-- ============================================================== -->
    <!-- Main wrapper - style you can find in pages.scss -->
    <!-- ============================================================== -->
    <div id="main-wrapper" class="card-user">
        <div class="clearfix"></div>
        <!-- ============================ User Dashboard ================================== -->
        <section class="p-0">
            <div class="container-fuild">
                <div class="user-info-sidebar">
                    <div class="background-image">
                        <img src="~/assets/img/user_card.jpg" />
                    </div>
                    <div class="account-drop">
                        <img src="https://cdn.realtech.com.vn/@Model.Avatar" class="avater-img" alt="">
                        <div class="user-text">
                            <p>@Model.FullName</p>
                            <p>@Model.Position</p>
                            <p>SGO Group</p>
                        </div>
                        <div class="btn-group2 mb-20">
                            <div class="btn-contact">
                                <div class="btn-phone">
                                    Mobile: <a href="tel:@Model.Mobile">@Model.Mobile</a>
                                </div>
                                <div class="btn-phone">
                                    Email: <a href="mailto:@Model.Email">@Model.Email</a>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex gap-10 align-items-center justify-center">
                            <a class="save-contact" href="#">
                                <i class="fa-regular fa-address-book"></i>
                                Lưu vào danh bạ
                            </a>
                            <a class="save-contact" href="https://sgoland.vn/#refid=@Model.Id">
                                <i class="far fa-user"></i>
                                Đăng ký thành viên
                            </a>
                        </div>
                    </div>
                </div>

            </div>
        </section>

		<footer class="footer-dashboard">
			<div class="footer_row text-center">
				Copyright 2023 ©. Development by Realtech Inc
			</div>
		</footer>
	</div>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js" defer></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
	<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
	<script src="~/assets/js/custom.js?v=1111"></script>
@*    <script src="~/assets/vcards-js/index.js?v=1"></script>*@
</body>
</html>
<script>
    'use strict';
    const vCard = require('../index');
    const assert = require('assert');

    /**
     * Test values.
     */
    const TEST_VALUE_UID = '69531f4a-c34d-4a1e-8922-bd38a9476a53';
    const TEST_FILENAME = './test/testCard.vcf';

    let getValueByFieldName = (fieldName, lines) => {

        for (let i = 0; i < lines.length; i++) {
            let line = lines[i];

            if (line.indexOf(fieldName) === 0) {
                return line.split(':')[1];
            }
        }

        return undefined;
    };

    /**
     * Test cases.
     */
    describe('vCard', function () {

        let testCard = vCard();
        testCard.version = '3.0';
        testCard.uid = TEST_VALUE_UID;
        testCard.lastName = 'Doe';
        testCard.middleName = 'D';
        testCard.firstName = 'John';
        testCard.nameSuffix = 'JR';
        testCard.namePrefix = 'MR';
        testCard.nickname = 'Test User';
        testCard.gender = 'M';
        testCard.organization = 'ACME Corporation';
        testCard.photo.attachFromUrl('https://testurl', 'png');
        testCard.logo.attachFromUrl('https://testurl', 'png');
        testCard.workPhone = '312-555-1212';
        testCard.homePhone = '312-555-1313';
        testCard.cellPhone = '12345678900';
        testCard.pagerPhone = '312-555-1515';
        testCard.homeFax = '312-555-1616';
        testCard.workFax = '312-555-1717';
        testCard.birthday = new Date(2018, 11, 1);
        testCard.anniversary = new Date(2018, 11, 1);
        testCard.title = 'Crash Test Dummy';
        testCard.role = 'Crash Testing';
        testCard.email = 'john.doe@testmail';
        testCard.workEmail = 'john.doe@workmail';
        testCard.url = 'http://johndoe';
        testCard.workUrl = 'http://acemecompany/johndoe';

        testCard.homeAddress.label = 'Home Address';
        testCard.homeAddress.street = '123 Main Street';
        testCard.homeAddress.city = 'Chicago';
        testCard.homeAddress.stateProvince = 'IL';
        testCard.homeAddress.postalCode = '12345';
        testCard.homeAddress.countryRegion = 'United States of America';

        testCard.workAddress.label = 'Work Address';
        testCard.workAddress.street = '123 Corporate Loop\nSuite 500';
        testCard.workAddress.city = 'Los Angeles';
        testCard.workAddress.stateProvince = 'CA';
        testCard.workAddress.postalCode = '54321';
        testCard.workAddress.countryRegion = 'California Republic';

        testCard.source = 'http://sourceurl';
        testCard.note = 'John Doe\'s \nnotes;,';

        testCard.socialUrls.facebook = 'https://facebook/johndoe';
        testCard.socialUrls.linkedIn = 'https://linkedin/johndoe';
        testCard.socialUrls.twitter = 'https://twitter/johndoe';
        testCard.socialUrls.flickr = 'https://flickr/johndoe';
        testCard.socialUrls.custom = 'https://custom/johndoe';

        var vCardString = testCard.getFormattedString();
        var lines = vCardString.split(/[\n\r]+/);

        describe('.getFormattedString', function () {

            it('should start with BEGIN:VCARD', function (done) {
                assert(lines.length > 0 && lines[0] === 'BEGIN:VCARD');
                done();
            });

            it('should be well-formed', function (done) {
                var line = '';
                var segments = '';

                for (var i = 0; i < lines.length; i++) {
                    line = lines[i];

                    if (line.length > 0) {
                        segments = line.split(':');
                        assert(segments.length >= 2 || segments[0].indexOf(';') === 0);
                    }
                }
                done();
            });

            it('should encode [\\n,\',;] properly (3.0+)', function (done) {
                var line = '';

                for (var i = 0; i < lines.length; i++) {
                    line = lines[i];

                    if (line.indexOf('NOTE') === 0) {
                        assert(line.indexOf('\\n') !== -1 && line.indexOf('\\') !== -1 && line.indexOf('\\;') !== -1);
                        done();
                    }
                }
            });

            it('should encode numeric input as strings', function (done) {
                testCard.workAddress.postalCode = 12345;
                testCard.getFormattedString();
                done();
            });

            it('should format birthday as 20181201', function (done) {
                let birthdayValue = getValueByFieldName('BDAY', lines);
                assert(birthdayValue === '20181201');
                done();
            });

            it('should format anniversary as 20181201', function (done) {
                let anniversaryValue = getValueByFieldName('ANNIVERSARY', lines);
                assert(anniversaryValue === '20181201');
                done();
            });

            it('should not crash when cellPhone is a large number, using 12345678900', function (done) {
                testCard.cellPhone = 12345678900;
                done();
            });

            it(`should have UID set as test value: ${TEST_VALUE_UID}`, (done) => {
                assert(getValueByFieldName('UID', lines) === TEST_VALUE_UID);
                done();
            });

            it('should end with END:VCARD', function (done) {
                assert(lines.length > 2 && lines[lines.length - 2] === 'END:VCARD');
                done();
            });

            it(`should save to ${TEST_FILENAME}`, function (done) {
                testCard.saveToFile(TEST_FILENAME);
                done();
            });
        });
    });
</script>